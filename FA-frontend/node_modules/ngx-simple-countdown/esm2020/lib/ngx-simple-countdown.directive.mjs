import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { interval, ReplaySubject } from 'rxjs';
import { tap, takeUntil, filter } from 'rxjs/operators';
import { getDateNow, getCountdownResult, getLanguage } from './utils';
import * as i0 from "@angular/core";
export class NgxSimpleCountdownDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.endMessage = 'countdown finish';
        this.language = 'en';
        this.reactive = true;
        this.styles = 'font-size:20px;color:#FFF;background-color:#000;padding:10px 5px;font-weight:bold;min-width:40px;text-align:center;';
        this.finish = new EventEmitter();
    }
    ngOnInit() {
        this.dateNow = getDateNow();
        this.keywords = getLanguage(this.language);
        this.initSimpleCountdown();
    }
    ngOnDestroy() { }
    initSimpleCountdown() {
        this.totalSecondes = this.dateTo - this.dateNow;
        this.updateSimpleCountdown(this.totalSecondes);
        this.interval$ = interval(1000).pipe(takeUntil(this.componentDestroyed(this)), filter((_) => this.reactive && this.totalSecondes > 0), tap((_) => {
            this.totalSecondes--;
            this.updateSimpleCountdown(this.totalSecondes);
        }));
        if (this.reactive) {
            this.interval$.subscribe();
        }
    }
    createHTML(data) {
        const { day, hours, minutes, seconds } = data;
        let o = '';
        if (this.totalSecondes > 0) {
            o = '<div style="display:flex;">';
            if (day > 0) {
                o += `<div style="${this.styles}">
          ${day}${this.keywords.day}
          </div>`;
            }
            if (hours > 0 || day > 0) {
                o += `<div style="${this.styles}">
          ${hours}${this.keywords.hours}
        </div>`;
            }
            if ((minutes > 0 || hours > 0 || day > 0) && this.reactive) {
                o += `<div style="${this.styles}">
          ${minutes}${this.keywords.minutes}
        </div>`;
            }
            if ((seconds > 0 || minutes > 0 || hours > 0 || day > 0) &&
                this.reactive) {
                o += `<div style="${this.styles}">
          ${seconds}${this.keywords.seconds}
        </div>`;
            }
            o += '</div>';
        }
        else {
            this.finish.emit();
            if (this.endMessage !== '') {
                o += `<div style="${this.styles}">${this.endMessage}</div>`;
            }
        }
        this.elementRef.nativeElement.innerHTML = o;
    }
    updateSimpleCountdown(secondes) {
        const countdownResult = getCountdownResult(secondes);
        this.createHTML(countdownResult);
    }
    componentDestroyed(component) {
        const oldNgOnDestroy = component.ngOnDestroy;
        const destroyed$ = new ReplaySubject(1);
        component.ngOnDestroy = () => {
            oldNgOnDestroy.apply(component);
            destroyed$.next(undefined);
            destroyed$.complete();
        };
        return destroyed$;
    }
}
NgxSimpleCountdownDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: NgxSimpleCountdownDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
NgxSimpleCountdownDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.9", type: NgxSimpleCountdownDirective, selector: "[simpleCountdown]", inputs: { dateTo: "dateTo", endMessage: "endMessage", language: "language", reactive: "reactive", styles: "styles" }, outputs: { finish: "finish" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: NgxSimpleCountdownDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[simpleCountdown]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { dateTo: [{
                type: Input
            }], endMessage: [{
                type: Input
            }], language: [{
                type: Input
            }], reactive: [{
                type: Input
            }], styles: [{
                type: Input
            }], finish: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Directive, Input } from '@angular/core';
import { interval, ReplaySubject } from 'rxjs';
import { tap, takeUntil, filter } from 'rxjs/operators';
import { getCountdownResult, getDateNow, getLanguage } from './utils';
import * as i0 from "@angular/core";
export class NgxSimpleTimeagoDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.language = 'en';
        this.reactive = true;
    }
    ngOnInit() {
        this.dateNow = getDateNow();
        this.keywords = getLanguage(this.language);
        this.initSimpleCountdown();
    }
    ngOnDestroy() { }
    initSimpleCountdown() {
        this.totalSecondes = this.dateNow - this.date;
        this.updateSimpleCountdown(this.totalSecondes);
        this.interval$ = interval(20000).pipe(takeUntil(this.componentDestroyed(this)), filter(() => this.reactive && this.totalSecondes > 0), tap(() => {
            this.totalSecondes += 20;
            this.updateSimpleCountdown(this.totalSecondes);
        }));
        if (this.reactive) {
            this.interval$.subscribe();
        }
    }
    createHTML(data) {
        const { day, hours, minutes } = data;
        let o = '';
        if (this.totalSecondes > 0) {
            if (this.totalSecondes <= 60) {
                o += this.keywords.now;
            }
            else {
                o += `${this.keywords.timeago} `;
                if (data.day > 0) {
                    o += `${data.day}${this.keywords.day} `;
                }
                if (hours > 0 || day > 0) {
                    o += `${hours}${this.keywords.hours} `;
                }
                if (minutes > 0 || hours > 0 || day > 0) {
                    o += `${minutes}${this.keywords.minutes} `;
                }
            }
        }
        this.elementRef.nativeElement.innerHTML = o;
    }
    updateSimpleCountdown(secondes) {
        const countdownResult = getCountdownResult(secondes);
        this.createHTML(countdownResult);
    }
    componentDestroyed(component) {
        const oldNgOnDestroy = component.ngOnDestroy;
        const destroyed$ = new ReplaySubject(1);
        component.ngOnDestroy = () => {
            oldNgOnDestroy.apply(component);
            destroyed$.next(undefined);
            destroyed$.complete();
        };
        return destroyed$;
    }
}
NgxSimpleTimeagoDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: NgxSimpleTimeagoDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
NgxSimpleTimeagoDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.9", type: NgxSimpleTimeagoDirective, selector: "[simpleTimeago]", inputs: { date: "date", language: "language", reactive: "reactive" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: NgxSimpleTimeagoDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[simpleTimeago]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { date: [{
                type: Input
            }], language: [{
                type: Input
            }], reactive: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNpbXBsZS10aW1lYWdvLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zaW1wbGUtY291bnRkb3duL3NyYy9saWIvbmd4LXNpbXBsZS10aW1lYWdvLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBaUMsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLFFBQVEsRUFBYyxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxTQUFTLENBQUM7O0FBS3RFLE1BQU0sT0FBTyx5QkFBeUI7SUFVcEMsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQVJqQyxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLGFBQVEsR0FBRyxJQUFJLENBQUM7SUFPb0IsQ0FBQztJQUU5QyxRQUFRO1FBQ04sSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELFdBQVcsS0FBSSxDQUFDO0lBRVIsbUJBQW1CO1FBQ3pCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzlDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFD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dFJlZiwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGludGVydmFsLCBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YXAsIHRha2VVbnRpbCwgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBDb3VudGRvd25SZXN1bHQsIENvdW50ZG93bktleXdvcmRzIH0gZnJvbSAnLi9tb2RlbHMnO1xuaW1wb3J0IHsgZ2V0Q291bnRkb3duUmVzdWx0LCBnZXREYXRlTm93LCBnZXRMYW5ndWFnZSB9IGZyb20gJy4vdXRpbHMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc2ltcGxlVGltZWFnb10nXG59KVxuZXhwb3J0IGNsYXNzIE5neFNpbXBsZVRpbWVhZ29EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIGRhdGU6IG51bWJlcjtcbiAgQElucHV0KCkgbGFuZ3VhZ2UgPSAnZW4nO1xuICBASW5wdXQoKSByZWFjdGl2ZSA9IHRydWU7XG5cbiAgcHVibGljIGRhdGVOb3c6IG51bWJlcjtcbiAgcHVibGljIGludGVydmFsJDogT2JzZXJ2YWJsZTxudW1iZXI+O1xuICBwdWJsaWMga2V5d29yZHM6IENvdW50ZG93bktleXdvcmRzO1xuICBwdWJsaWMgdG90YWxTZWNvbmRlczogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmRhdGVOb3cgPSBnZXREYXRlTm93KCk7XG4gICAgdGhpcy5rZXl3b3JkcyA9IGdldExhbmd1YWdlKHRoaXMubGFuZ3VhZ2UpO1xuICAgIHRoaXMuaW5pdFNpbXBsZUNvdW50ZG93bigpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7fVxuXG4gIHByaXZhdGUgaW5pdFNpbXBsZUNvdW50ZG93bigpOiB2b2lkIHtcbiAgICB0aGlzLnRvdGFsU2Vjb25kZXMgPSB0aGlzLmRhdGVOb3cgLSB0aGlzLmRhdGU7XG4gICAgdGhpcy51cGRhdGVTaW1wbGVDb3VudGRvd24odGhpcy50b3RhbFNlY29uZGVzKTtcblxuICAgIHRoaXMuaW50ZXJ2YWwkID0gaW50ZXJ2YWwoMjAwMDApLnBpcGUoXG4gICAgICB0YWtlVW50aWwodGhpcy5jb21wb25lbnREZXN0cm95ZWQodGhpcykpLFxuICAgICAgZmlsdGVyKCgpID0+IHRoaXMucmVhY3RpdmUgJiYgdGhpcy50b3RhbFNlY29uZGVzID4gMCksXG4gICAgICB0YXAoKCkgPT4ge1xuICAgICAgICB0aGlzLnRvdGFsU2Vjb25kZXMgKz0gMjA7XG4gICAgICAgIHRoaXMudXBkYXRlU2ltcGxlQ291bnRkb3duKHRoaXMudG90YWxTZWNvbmRlcyk7XG4gICAgICB9KVxuICAgICk7XG5cbiAgICBpZiAodGhpcy5yZWFjdGl2ZSkge1xuICAgICAgdGhpcy5pbnRlcnZhbCQuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVIVE1MKGRhdGE6IENvdW50ZG93blJlc3VsdCk6IHZvaWQge1xuICAgIGNvbnN0IHsgZGF5LCBob3VycywgbWludXRlcyB9ID0gZGF0YTtcbiAgICBsZXQgbyA9ICcnO1xuXG4gICAgaWYgKHRoaXMudG90YWxTZWNvbmRlcyA+IDApIHtcbiAgICAgIGlmICh0aGlzLnRvdGFsU2Vjb25kZXMgPD0gNjApIHtcbiAgICAgICAgbyArPSB0aGlzLmtleXdvcmRzLm5vdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG8gKz0gYCR7dGhpcy5rZXl3b3Jkcy50aW1lYWdvfSBgO1xuICAgICAgICBpZiAoZGF0YS5kYXkgPiAwKSB7XG4gICAgICAgICAgbyArPSBgJHtkYXRhLmRheX0ke3RoaXMua2V5d29yZHMuZGF5fSBgO1xuICAgICAgICB9XG4gICAgICAgIGlmIChob3VycyA+IDAgfHwgZGF5ID4gMCkge1xuICAgICAgICAgIG8gKz0gYCR7aG91cnN9JHt0aGlzLmtleXdvcmRzLmhvdXJzfSBgO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtaW51dGVzID4gMCB8fCBob3VycyA+IDAgfHwgZGF5ID4gMCkge1xuICAgICAgICAgIG8gKz0gYCR7bWludXRlc30ke3RoaXMua2V5d29yZHMubWludXRlc30gYDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmlubmVySFRNTCA9IG87XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVNpbXBsZUNvdW50ZG93bihzZWNvbmRlczogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgY291bnRkb3duUmVzdWx0OiBDb3VudGRvd25SZXN1bHQgPSBnZXRDb3VudGRvd25SZXN1bHQoc2Vjb25kZXMpO1xuICAgIHRoaXMuY3JlYXRlSFRNTChjb3VudGRvd25SZXN1bHQpO1xuICB9XG5cbiAgcHJpdmF0ZSBjb21wb25lbnREZXN0cm95ZWQoY29tcG9uZW50OiBPbkRlc3Ryb3kpIHtcbiAgICBjb25zdCBvbGROZ09uRGVzdHJveSA9IGNvbXBvbmVudC5uZ09uRGVzdHJveTtcbiAgICBjb25zdCBkZXN0cm95ZWQkID0gbmV3IFJlcGxheVN1YmplY3Q8dm9pZD4oMSk7XG5cbiAgICBjb21wb25lbnQubmdPbkRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICBvbGROZ09uRGVzdHJveS5hcHBseShjb21wb25lbnQpO1xuICAgICAgZGVzdHJveWVkJC5uZXh0KHVuZGVmaW5lZCk7XG4gICAgICBkZXN0cm95ZWQkLmNvbXBsZXRlKCk7XG4gICAgfTtcblxuICAgIHJldHVybiBkZXN0cm95ZWQkO1xuICB9XG59XG4iXX0=
export const getDateNow = () => {
    return Math.floor(Date.now() / 1000);
};
export const getCountdownResult = (secondes) => {
    return {
        seconds: Math.floor((secondes / 1) % 60),
        minutes: Math.floor((secondes / 1 / 60) % 60),
        hours: Math.floor((secondes / (1 * 60 * 60)) % 24),
        day: Math.floor(secondes / (1 * 60 * 60 * 24))
    };
};
export const getLanguage = (language) => {
    if (language === 'fr') {
        return {
            timeago: 'il y a',
            now: "à l'instant",
            seconds: 's',
            minutes: 'm',
            hours: 'h',
            day: 'j'
        };
    }
    else if (language === 'de') {
        return {
            timeago: 'vor',
            now: 'gerade jetzt',
            seconds: 'z',
            minutes: 'm',
            hours: 's',
            day: 't'
        };
    }
    else if (language === 'pt') {
        return {
            timeago: 'há',
            now: 'agora mesmo',
            seconds: 's',
            minutes: 'm',
            hours: 's',
            day: 'd'
        };
    }
    else if (language === 'es') {
        return {
            timeago: 'hace',
            now: 'en este momento',
            seconds: 's',
            minutes: 'm',
            hours: 's',
            day: 'd'
        };
    }
    else if (language === 'cs') {
        return {
            timeago: 'před',
            now: 'právě teď',
            seconds: 's',
            minutes: 'm',
            hours: 'h',
            day: 'd'
        };
    }
    else if (language === 'pl') {
        return {
            timeago: 'jest',
            now: 'właśnie',
            seconds: 's',
            minutes: 'm',
            hours: 'g',
            day: 'd'
        };
    }
    else if (language === 'ge') {
        return {
            timeago: 'დასრულდა',
            now: 'დროა',
            seconds: 'წმ',
            minutes: 'წთ',
            hours: 'სთ',
            day: 'დღე'
        };
    }
    else {
        return {
            timeago: 'there is',
            now: 'just now',
            seconds: 's',
            minutes: 'm',
            hours: 'h',
            day: 'd'
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2ltcGxlLWNvdW50ZG93bi9zcmMvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxHQUFHLEVBQUU7SUFDN0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUN2QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLFFBQWdCLEVBQW1CLEVBQUU7SUFDdEUsT0FBTztRQUNMLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN4QyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzdDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNsRCxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztLQUMvQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsUUFBZ0IsRUFBcUIsRUFBRTtJQUNqRSxJQUFJLFFBQVEsS0FBSyxJQUFJLEVBQUU7UUFDckIsT0FBTztZQUNMLE9BQU8sRUFBRSxRQUFRO1lBQ2pCLEdBQUcsRUFBRSxhQUFhO1lBQ2xCLE9BQU8sRUFBRSxHQUFHO1lBQ1osT0FBTyxFQUFFLEdBQUc7WUFDWixLQUFLLEVBQUUsR0FBRztZQUNWLEdBQUcsRUFBRSxHQUFHO1NBQ1QsQ0FBQztLQUNIO1NBQU0sSUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFO1FBQzVCLE9BQU87WUFDTCxPQUFPLEVBQUUsS0FBSztZQUNkLEdBQUcsRUFBRSxjQUFjO1lBQ25CLE9BQU8sRUFBRSxHQUFHO1lBQ1osT0FBTyxFQUFFLEdBQUc7WUFDWixLQUFLLEVBQUUsR0FBRztZQUNWLEdBQUcsRUFBRSxHQUFHO1NBQ1QsQ0FBQztLQUNIO1NBQU0sSUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFO1FBQzVCLE9BQU87WUFDTCxPQUFPLEVBQUUsSUFBSTtZQUNiLEdBQUcsRUFBRSxhQUFhO1lBQ2xCLE9BQU8sRUFBRSxHQUFHO1lBQ1osT0FBTyxFQUFFLEdBQUc7WUFDWixLQUFLLEVBQUUsR0FBRztZQUNWLEdBQUcsRUFBRSxHQUFHO1NBQ1QsQ0FBQztLQUNIO1NBQU0sSUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFO1FBQzVCLE9BQU87WUFDTCxPQUFPLEVBQUUsTUFBTTtZQUNmLEdBQUcsRUFBRSxpQkFBaUI7WUFDdEIsT0FBTyxFQUFFLEdBQUc7WUFDWixPQUFPLEVBQUUsR0FBRztZQUNaLEtBQUssRUFBRSxHQUFHO1lBQ1YsR0FBRyxFQUFFLEdBQUc7U0FDVCxDQUFDO0tBQ0g7U0FBTSxJQUFJLFFBQVEsS0FBSyxJQUFJLEVBQUU7UUFDNUIsT0FBTztZQUNMLE9BQU8sRUFBRSxNQUFNO1lBQ2YsR0FBRyxFQUFFLFdBQVc7WUFDaEIsT0FBTyxFQUFFLEdBQUc7WUFDWixPQUFPLEVBQUUsR0FBRztZQUNaLEtBQUssRUFBRSxHQUFHO1lBQ1YsR0FBRyxFQUFFLEdBQUc7U0FDVCxDQUFDO0tBQ0g7U0FBTSxJQUFJLFFBQVEsS0FBSyxJQUFJLEVBQUU7UUFDNUIsT0FBTztZQUNMLE9BQU8sRUFBRSxNQUFNO1lBQ2YsR0FBRyxFQUFFLFNBQVM7WUFDZCxPQUFPLEVBQUUsR0FBRztZQUNaLE9BQU8sRUFBRSxHQUFHO1lBQ1osS0FBSyxFQUFFLEdBQUc7WUFDVixHQUFHLEVBQUUsR0FBRztTQUNULENBQUM7S0FDSDtTQUFNLElBQUksUUFBUSxLQUFLLElBQUksRUFBRTtRQUM1QixPQUFPO1lBQ0wsT0FBTyxFQUFFLFVBQVU7WUFDbkIsR0FBRyxFQUFFLE1BQU07WUFDWCxPQUFPLEVBQUUsSUFBSTtZQUNiLE9BQU8sRUFBRSxJQUFJO1lBQ2IsS0FBSyxFQUFFLElBQUk7WUFDWCxHQUFHLEVBQUUsS0FBSztTQUNYLENBQUM7S0FDSDtTQUFNO1FBQ0wsT0FBTztZQUNMLE9BQU8sRUFBRSxVQUFVO1lBQ25CLEdBQUcsRUFBRSxVQUFVO1lBQ2YsT0FBTyxFQUFFLEdBQUc7WUFDWixPQUFPLEVBQUUsR0FBRztZQUNaLEtBQUssRUFBRSxHQUFHO1lBQ1YsR0FBRyxFQUFFLEdBQUc7U0FDVCxDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3VudGRvd25SZXN1bHQsIENvdW50ZG93bktleXdvcmRzIH0gZnJvbSAnLi9tb2RlbHMvJztcblxuZXhwb3J0IGNvbnN0IGdldERhdGVOb3cgPSAoKSA9PiB7XG4gIHJldHVybiBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDb3VudGRvd25SZXN1bHQgPSAoc2Vjb25kZXM6IG51bWJlcik6IENvdW50ZG93blJlc3VsdCA9PiB7XG4gIHJldHVybiB7XG4gICAgc2Vjb25kczogTWF0aC5mbG9vcigoc2Vjb25kZXMgLyAxKSAlIDYwKSxcbiAgICBtaW51dGVzOiBNYXRoLmZsb29yKChzZWNvbmRlcyAvIDEgLyA2MCkgJSA2MCksXG4gICAgaG91cnM6IE1hdGguZmxvb3IoKHNlY29uZGVzIC8gKDEgKiA2MCAqIDYwKSkgJSAyNCksXG4gICAgZGF5OiBNYXRoLmZsb29yKHNlY29uZGVzIC8gKDEgKiA2MCAqIDYwICogMjQpKVxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldExhbmd1YWdlID0gKGxhbmd1YWdlOiBzdHJpbmcpOiBDb3VudGRvd25LZXl3b3JkcyA9PiB7XG4gIGlmIChsYW5ndWFnZSA9PT0gJ2ZyJykge1xuICAgIHJldHVybiB7XG4gICAgICB0aW1lYWdvOiAnaWwgeSBhJyxcbiAgICAgIG5vdzogXCLDoCBsJ2luc3RhbnRcIixcbiAgICAgIHNlY29uZHM6ICdzJyxcbiAgICAgIG1pbnV0ZXM6ICdtJyxcbiAgICAgIGhvdXJzOiAnaCcsXG4gICAgICBkYXk6ICdqJ1xuICAgIH07XG4gIH0gZWxzZSBpZiAobGFuZ3VhZ2UgPT09ICdkZScpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGltZWFnbzogJ3ZvcicsXG4gICAgICBub3c6ICdnZXJhZGUgamV0enQnLFxuICAgICAgc2Vjb25kczogJ3onLFxuICAgICAgbWludXRlczogJ20nLFxuICAgICAgaG91cnM6ICdzJyxcbiAgICAgIGRheTogJ3QnXG4gICAgfTtcbiAgfSBlbHNlIGlmIChsYW5ndWFnZSA9PT0gJ3B0Jykge1xuICAgIHJldHVybiB7XG4gICAgICB0aW1lYWdvOiAnaMOhJyxcbiAgICAgIG5vdzogJ2Fnb3JhIG1lc21vJyxcbiAgICAgIHNlY29uZHM6ICdzJyxcbiAgICAgIG1pbnV0ZXM6ICdtJyxcbiAgICAgIGhvdXJzOiAncycsXG4gICAgICBkYXk6ICdkJ1xuICAgIH07XG4gIH0gZWxzZSBpZiAobGFuZ3VhZ2UgPT09ICdlcycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGltZWFnbzogJ2hhY2UnLFxuICAgICAgbm93OiAnZW4gZXN0ZSBtb21lbnRvJyxcbiAgICAgIHNlY29uZHM6ICdzJyxcbiAgICAgIG1pbnV0ZXM6ICdtJyxcbiAgICAgIGhvdXJzOiAncycsXG4gICAgICBkYXk6ICdkJ1xuICAgIH07XG4gIH0gZWxzZSBpZiAobGFuZ3VhZ2UgPT09ICdjcycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGltZWFnbzogJ3DFmWVkJyxcbiAgICAgIG5vdzogJ3Byw6F2xJsgdGXEjycsXG4gICAgICBzZWNvbmRzOiAncycsXG4gICAgICBtaW51dGVzOiAnbScsXG4gICAgICBob3VyczogJ2gnLFxuICAgICAgZGF5OiAnZCdcbiAgICB9O1xuICB9IGVsc2UgaWYgKGxhbmd1YWdlID09PSAncGwnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRpbWVhZ286ICdqZXN0JyxcbiAgICAgIG5vdzogJ3fFgmHFm25pZScsXG4gICAgICBzZWNvbmRzOiAncycsXG4gICAgICBtaW51dGVzOiAnbScsXG4gICAgICBob3VyczogJ2cnLFxuICAgICAgZGF5OiAnZCdcbiAgICB9O1xuICB9IGVsc2UgaWYgKGxhbmd1YWdlID09PSAnZ2UnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRpbWVhZ286ICfhg5Phg5Dhg6Hhg6Dhg6Phg5rhg5Phg5AnLFxuICAgICAgbm93OiAn4YOT4YOg4YOd4YOQJyxcbiAgICAgIHNlY29uZHM6ICfhg6zhg5snLFxuICAgICAgbWludXRlczogJ+GDrOGDlycsXG4gICAgICBob3VyczogJ+GDoeGDlycsXG4gICAgICBkYXk6ICfhg5Phg6bhg5QnXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGltZWFnbzogJ3RoZXJlIGlzJyxcbiAgICAgIG5vdzogJ2p1c3Qgbm93JyxcbiAgICAgIHNlY29uZHM6ICdzJyxcbiAgICAgIG1pbnV0ZXM6ICdtJyxcbiAgICAgIGhvdXJzOiAnaCcsXG4gICAgICBkYXk6ICdkJ1xuICAgIH07XG4gIH1cbn07XG4iXX0=